// Global variables

// Early theme initialization to prevent flash of unstyled content
(function() {
  const savedTheme = localStorage.getItem("theme") || "light";
  document.body.setAttribute("data-theme", savedTheme);
  document.documentElement.setAttribute("data-theme", savedTheme);
})();

// Retry utility with exponential backoff
async function fetchWithRetry(url, options = {}, maxRetries = 3, baseDelay = 1000) {
  let lastError;
  
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
  
      
      const controller = typeof AbortController !== 'undefined' ? new AbortController() : null;
      const timeoutId = controller ? setTimeout(() => controller.abort(), 10000) : null; // 10 second timeout
      
      const response = await fetch(url, {
        ...options,
        ...(controller && { signal: controller.signal })
      });
      
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      
      return response;
      
    } catch (error) {
      lastError = error;
      // Fetch attempt failed, will retry if attempts remaining
      
      // Don't retry on the last attempt
      if (attempt === maxRetries) {
        break;
      }
      
      // Calculate exponential backoff delay
      const delay = baseDelay * Math.pow(2, attempt) + Math.random() * 1000;
      
      
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  throw new Error(`Failed to fetch ${url} after ${maxRetries + 1} attempts. Last error: ${lastError.message}`);
}

// Accordion Menu Functionality
function openAccordionMenu() {
  const menu = document.getElementById("accordionMenu");
  menu.classList.add("active");
  document.body.style.overflow = "hidden";
}

function closeAccordionMenu() {
  const menu = document.getElementById("accordionMenu");
  menu.classList.remove("active");
  document.body.style.overflow = "";

  // Close all accordion panels
  const panels = document.querySelectorAll(".accordion-panel");
  const toggles = document.querySelectorAll(".accordion-toggle");

  panels.forEach((panel) => panel.classList.remove("active"));
  toggles.forEach((toggle) => toggle.classList.remove("active"));
}

function toggleAccordionPanel(targetId, toggleButton) {
  const panel = document.getElementById(targetId);
  const isActive = panel.classList.contains("active");

  // Close all other panels
  const allPanels = document.querySelectorAll(".accordion-panel");
  const allToggles = document.querySelectorAll(".accordion-toggle");

  allPanels.forEach((p) => {
    if (p !== panel) {
      p.classList.remove("active");
    }
  });

  allToggles.forEach((t) => {
    if (t !== toggleButton) {
      t.classList.remove("active");
    }
  });

  // Toggle current panel
  if (isActive) {
    panel.classList.remove("active");
    toggleButton.classList.remove("active");
  } else {
    panel.classList.add("active");
    toggleButton.classList.add("active");
  }
}

// Counter animation functionality is handled by initCounters() function below

// Animated Counter Function
function initCounters() {
  const counters = document.querySelectorAll("[data-target]");
  const options = {
    threshold: 0.5,
    rootMargin: "0px 0px -100px 0px",
  };

  if (typeof IntersectionObserver === 'undefined') {
    // Fallback for browsers without IntersectionObserver support
    counters.forEach(counter => {
      const targetAttr = counter.getAttribute("data-target");
      const target = parseFloat(targetAttr);
      if (targetAttr && !isNaN(target)) {
        animateCounter(counter, target);
      }
    });
    return;
  }

  const observer = new IntersectionObserver(function (entries) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const counter = entry.target;
        const targetAttr = counter.getAttribute("data-target");
        const target = parseFloat(targetAttr);

        // Only animate if we have a valid target
        if (targetAttr && !isNaN(target)) {
          animateCounter(counter, target);
        } else {
          // Invalid or missing data-target attribute
          counter.textContent = "0";
        }
        observer.unobserve(counter);
      }
    });
  }, options);

  counters.forEach((counter) => {
    observer.observe(counter);
  });
}

function animateCounter(element, target) {
  // Check if target is a valid number
  if (isNaN(target) || target === null || target === undefined) {
    // Invalid target value for counter
    element.textContent = "0";
    return;
  }

  let current = 0;
  const increment = target / 100;
  const duration = 2000; // 2 seconds
  const stepTime = duration / 100;

  const timer = setInterval(() => {
    current += increment;
    if (current >= target) {
      current = target;
      clearInterval(timer);
    }

    // Format the number based on target value
    if (target >= 1000) {
      element.textContent = Math.floor(current).toLocaleString();
    } else if (target % 1 !== 0) {
      element.textContent = current.toFixed(1);
    } else {
      element.textContent = Math.floor(current);
    }
  }, stepTime);
}



// Enhanced Component Loading Functions with Retry Logic
async function loadHeader() {
  const headerPlaceholder = document.getElementById('header-placeholder');
  
  if (!headerPlaceholder) {
    // Header placeholder not found
    return;
  }
  
  // Check if header is already loaded
  if (headerPlaceholder.innerHTML.trim()) {
    return;
  }
  
  try {
    const response = await fetchWithRetry('header.html?v=' + Date.now(), {}, 3, 1000);
    const headerHTML = await response.text();
    
    if (!headerHTML.trim()) {
      throw new Error('Header content is empty');
    }
    
    headerPlaceholder.innerHTML = headerHTML;
    
    // Re-initialize event listeners immediately after loading header
    initializeHeaderEventListeners();
    
    // Set active navigation state after a brief delay to ensure DOM is ready
    setTimeout(() => {
      setActiveNavigationState(); // Sets active navigation links
    }, 100);
    

  } catch (error) {
    // Enhanced fallback with retry option
    headerPlaceholder.innerHTML = `
      <div class="alert alert-warning d-flex justify-content-between align-items-center" role="alert">
        <span>Failed to load header. Please check your connection.</span>
        <button class="btn btn-sm btn-outline-primary" onclick="loadHeader()">Retry</button>
      </div>
    `;
  }
}

/**
 * Sets the active navigation state based on current page
 * Called conditionally after header loads
 */
function setActiveNavigationState() {
  // Get current page filename
  const currentPage = window.location.pathname.split('/').pop() || 'index.html';
  
  // Remove active class from all nav links
  const navLinks = document.querySelectorAll('.navbar-nav .nav-link, .dropdown-item');
  navLinks.forEach(link => {
    link.classList.remove('active');
  });
  
  // Set active class based on current page
  const pageMapping = {
    'index.html': 'home',
    'genetic-testing.html': 'genetic-testing',
    'ivf.html': 'ivf',
    'ivf-icsi.html': 'ivf-icsi',
    'endometriosis.html': 'endometriosis',
    'embryo-freezing.html': 'embryo-freezing',
    'female-fertility.html': 'female-fertility',
    'male-fertility.html': 'male-fertility',
    'female-fertility-treatments.html': 'female-fertility-treatments',
    'male-fertility-treatments.html': 'male-fertility-treatments',
    'pcos.html': 'pcos'
  };
  
  // Find and activate the corresponding nav link
  const targetPage = pageMapping[currentPage];
  if (targetPage) {
    const targetLink = document.querySelector(`[data-page="${targetPage}"], [href*="${currentPage}"]`);
    if (targetLink) {
      targetLink.classList.add('active');
    }
  }
}

async function loadFooter() {
  const footerPlaceholder = document.getElementById("footer-placeholder");
  
  if (!footerPlaceholder) {
    // Footer placeholder not found
    return;
  }
  
  if (footerPlaceholder.innerHTML.trim() !== '') {
    return;
  }
  
  try {
    const response = await fetchWithRetry(`footer.html?v=12`, {}, 3, 1000);
    const footerHTML = await response.text();
    
    if (!footerHTML.trim()) {
      throw new Error('Footer content is empty');
    }
    
    footerPlaceholder.innerHTML = footerHTML;

    
    // Re-initialize AOS for footer elements only if AOS is available
    if (typeof AOS !== 'undefined') {
      setTimeout(() => {
        AOS.refresh();
      }, 100);
    }
  } catch (error) {
    // Enhanced fallback with retry option
    footerPlaceholder.innerHTML = `
      <div class="alert alert-warning d-flex justify-content-between align-items-center" role="alert">
        <span>Failed to load footer. Please check your connection.</span>
        <button class="btn btn-sm btn-outline-primary" onclick="loadFooter()">Retry</button>
      </div>
    `;
  }
}



function initializeMegaMenus() {
  const megaDropdowns = document.querySelectorAll('.mega-dropdown');
  let activeDropdown = null;
  let touchStartTime = 0;
  
  megaDropdowns.forEach(dropdown => {
    const toggle = dropdown.querySelector('.dropdown-toggle');
    const menu = dropdown.querySelector('.mega-menu');
    
    if (!toggle || !menu) {
      return;
    }
    
    // Enhanced touch/tap handling for mobile devices
    toggle.addEventListener('touchstart', function() {
      touchStartTime = Date.now();
    }, { passive: true });
    
    toggle.addEventListener('touchend', function(e) {
      const touchDuration = Date.now() - touchStartTime;
      
      // Only handle tap if it's a quick touch (not a scroll)
      if (touchDuration < 300) {
        e.preventDefault();
        e.stopPropagation();
        
        // Close other open mega menus
        if (activeDropdown && activeDropdown !== dropdown) {
          activeDropdown.classList.remove('show');
          activeDropdown.querySelector('.mega-menu').classList.remove('show');
        }
        
        // Toggle current mega menu
        const isOpen = dropdown.classList.contains('show');
        if (isOpen) {
          dropdown.classList.remove('show');
          menu.classList.remove('show');
          activeDropdown = null;
        } else {
          dropdown.classList.add('show');
          menu.classList.add('show');
          activeDropdown = dropdown;
          
          // Ensure proper z-index
          menu.style.zIndex = '9999';
          
          // Position adjustment for viewport
          adjustMegaMenuPosition(menu);
        }
      }
    }, { passive: false });
    
    // Enhanced click handling for mobile and desktop
    toggle.addEventListener('click', function(e) {
      // For mobile devices (screen width <= 991px)
      if (window.innerWidth <= 991) {
        e.preventDefault();
        e.stopPropagation();
        
        // Close other open mega menus
        if (activeDropdown && activeDropdown !== dropdown) {
          activeDropdown.classList.remove('show');
          activeDropdown.querySelector('.mega-menu').classList.remove('show');
        }
        
        // Toggle current mega menu
        const isOpen = dropdown.classList.contains('show');
        if (isOpen) {
          dropdown.classList.remove('show');
          menu.classList.remove('show');
          activeDropdown = null;
        } else {
          dropdown.classList.add('show');
          menu.classList.add('show');
          activeDropdown = dropdown;
          
          // Ensure proper z-index and positioning for mobile
          menu.style.zIndex = '9999';
          menu.style.display = 'block';
          adjustMegaMenuPosition(menu);
        }
      }
    });
    
    // Desktop hover behavior (only on non-touch devices)
    if (!('ontouchstart' in window)) {
      dropdown.addEventListener('mouseenter', function() {
        // Close other open mega menus
        if (activeDropdown && activeDropdown !== dropdown) {
          activeDropdown.classList.remove('show');
          activeDropdown.querySelector('.mega-menu').classList.remove('show');
        }
        
        dropdown.classList.add('show');
        menu.classList.add('show');
        menu.style.zIndex = '9999';
        activeDropdown = dropdown;
        
        // Position adjustment for viewport
        adjustMegaMenuPosition(menu);
      });
      
      dropdown.addEventListener('mouseleave', function() {
        dropdown.classList.remove('show');
        menu.classList.remove('show');
        if (activeDropdown === dropdown) {
          activeDropdown = null;
        }
      });
    }
  });
  
  // Close mega menus when clicking outside
  document.addEventListener('click', function(e) {
    if (activeDropdown && !activeDropdown.contains(e.target)) {
      activeDropdown.classList.remove('show');
      activeDropdown.querySelector('.mega-menu').classList.remove('show');
      activeDropdown = null;
    }
  });
  
  // Close mega menus on escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && activeDropdown) {
      activeDropdown.classList.remove('show');
      activeDropdown.querySelector('.mega-menu').classList.remove('show');
      activeDropdown = null;
    }
  });
  
  // Handle window resize to reposition mega menus
  window.addEventListener('resize', function() {
    if (activeDropdown) {
      const menu = activeDropdown.querySelector('.mega-menu');
      if (menu) {
        adjustMegaMenuPosition(menu);
      }
    }
  });
}

function adjustMegaMenuPosition(menu) {
  // Reset position styles
  menu.style.left = '';
  menu.style.right = '';
  menu.style.transform = '';
  
  // Get viewport and menu dimensions
  const rect = menu.getBoundingClientRect();
  const viewportWidth = window.innerWidth;
  
  // Check if menu extends beyond viewport
  if (rect.right > viewportWidth) {
    // Position from right edge
    menu.style.left = 'auto';
    menu.style.right = '0';
  } else if (rect.left < 0) {
    // Position from left edge
    menu.style.left = '0';
    menu.style.right = 'auto';
  }
  
  // For mobile devices, ensure full width utilization
  if (window.innerWidth <= 992) {
    menu.style.left = '0';
    menu.style.right = '0';
    menu.style.transform = 'none';
  }
}

function initializeHeaderEventListeners() {
  // Bootstrap navbar toggler (for main navigation)
  const navbarToggler = document.querySelector(".navbar-toggler");
  if (navbarToggler) {
    navbarToggler.addEventListener("click", function () {
      // Bootstrap handles the collapse automatically via data attributes
      // We just need to update ARIA attributes for accessibility
      const isExpanded = this.getAttribute("aria-expanded") === "true";
      this.setAttribute("aria-expanded", !isExpanded);
    });
  }

  // Mega menu functionality for touch devices and proper z-index handling
  initializeMegaMenus();

  // Theme toggle functionality for header
  function initializeThemeToggle() {
    const themeToggle = document.getElementById("themeToggle");
    const themeIconElement = document.querySelector(".theme-icon i");
    
    // Get current theme from localStorage and ensure it's applied to body
    const currentTheme = localStorage.getItem("theme") || "light";
    document.body.setAttribute("data-theme", currentTheme);
    document.documentElement.setAttribute("data-theme", currentTheme);
    

    
    if (themeToggle) {
      // Remove any existing event listeners
      themeToggle.removeEventListener("change", handleThemeToggle);
      
      // Set initial checkbox state
      themeToggle.checked = currentTheme === "dark";
      
      // Set initial theme icon if it exists
      if (themeIconElement) {
        themeIconElement.className = currentTheme === "dark" ? "fas fa-sun" : "fas fa-moon";
      }
      
      // Add event listener
      themeToggle.addEventListener("change", handleThemeToggle);
    }
  }
  
  function handleThemeToggle() {
    const themeToggle = document.getElementById("themeToggle");
    const themeIconElement = document.querySelector(".theme-icon i");
    const body = document.body;
    const newTheme = themeToggle.checked ? "dark" : "light";
    


    body.setAttribute("data-theme", newTheme);
    document.documentElement.setAttribute("data-theme", newTheme);
    localStorage.setItem("theme", newTheme);
    
    // Update header theme icon if it exists
    if (themeIconElement) {
      themeIconElement.className = newTheme === "dark" ? "fas fa-sun" : "fas fa-moon";
    }

    // Update accordion theme toggle icon if it exists
    const accordionThemeIconEl = document.querySelector(".accordion-theme-toggle .theme-icon");
    if (accordionThemeIconEl) {
      accordionThemeIconEl.textContent = newTheme === "dark" ? "☀️" : "🌙";
    }
  }
  
  // Initialize theme toggle with a small delay to ensure DOM is ready
  setTimeout(() => {
    initializeThemeToggle();
  }, 100);





// Event Listeners
document.addEventListener("DOMContentLoaded", function () {
  // Load header and footer first
    loadHeader();
    loadFooter();
    
    // Initialize theme from localStorage
    const body = document.body;
    const currentTheme = localStorage.getItem("theme") || "light";
    // Set default theme in localStorage if not present
    if (!localStorage.getItem("theme")) {
      localStorage.setItem("theme", "light");
    }
    body.setAttribute("data-theme", currentTheme);

  // Initialize accordion theme toggle icon
  const accordionThemeIconEl = document.querySelector(
    ".accordion-theme-toggle .theme-icon"
  );
  

  
  if (accordionThemeIconEl) {
    accordionThemeIconEl.textContent = currentTheme === "dark" ? "☀️" : "🌙";
  }

  // Accordion theme toggle functionality
  function initializeAccordionThemeToggle() {
    const accordionThemeToggle = document.getElementById("accordionThemeToggle");
    
    if (accordionThemeToggle) {
      // Remove any existing event listeners
      accordionThemeToggle.removeEventListener("click", handleAccordionThemeToggle);
      
      // Add event listener
      accordionThemeToggle.addEventListener("click", handleAccordionThemeToggle);
    }
  }
  
  function handleAccordionThemeToggle() {
    const body = document.body;
    const accordionThemeIconEl = document.querySelector(".accordion-theme-toggle .theme-icon");
    const currentTheme = body.getAttribute("data-theme") || "light";
    const newTheme = currentTheme === "dark" ? "light" : "dark";
    


    body.setAttribute("data-theme", newTheme);
    document.documentElement.setAttribute("data-theme", newTheme);
    localStorage.setItem("theme", newTheme);
    
    // Update accordion icon
    if (accordionThemeIconEl) {
      accordionThemeIconEl.textContent = newTheme === "dark" ? "☀️" : "🌙";
    }

    // Update main theme toggle checkbox and icon if they exist
    const mainThemeToggle = document.getElementById("themeToggle");
    const mainThemeIcon = document.querySelector(".theme-icon i");
    if (mainThemeToggle) {
      mainThemeToggle.checked = newTheme === "dark";
    }
    if (mainThemeIcon) {
      mainThemeIcon.className = newTheme === "dark" ? "fas fa-sun" : "fas fa-moon";
    }
  }
  
  // Initialize accordion theme toggle
  initializeAccordionThemeToggle();



  // Slider functionality removed - now using static hero section

  // Initialize counters
  initCounters();

  

   // Menu toggle (custom accordion menu)
  const menuToggle = document.getElementById("menuToggle");
  if (menuToggle) {
    menuToggle.addEventListener("click", function () {
      this.classList.toggle("active");
      if (this.classList.contains("active")) {
        openAccordionMenu();
      } else {
        closeAccordionMenu();
      }
    });
  }

  // Accordion toggles
  const accordionToggles = document.querySelectorAll(".accordion-toggle");
  accordionToggles.forEach((toggle) => {
    toggle.addEventListener("click", function () {
      const targetId = this.getAttribute("data-target");
      toggleAccordionPanel(targetId, this);
    });
  });

  // Accordion dropdown toggles
  const accordionDropdownBtns = document.querySelectorAll(".accordion-dropdown-btn");
  accordionDropdownBtns.forEach((btn) => {
    btn.addEventListener("click", function () {
      const dropdown = this.parentElement;
      const isActive = dropdown.classList.contains("active");
      
      // Close all other dropdowns
      document.querySelectorAll(".accordion-dropdown.active").forEach((activeDropdown) => {
        if (activeDropdown !== dropdown) {
          activeDropdown.classList.remove("active");
        }
      });
      
      // Toggle current dropdown
      dropdown.classList.toggle("active", !isActive);
    });
  });

  // Accordion nested dropdown toggles
  const accordionNestedBtns = document.querySelectorAll(".accordion-nested-btn");
  accordionNestedBtns.forEach((btn) => {
    btn.addEventListener("click", function () {
      const nestedDropdown = this.parentElement;
      const isActive = nestedDropdown.classList.contains("active");
      
      // Close all other nested dropdowns in the same parent
      const parentDropdown = nestedDropdown.closest(".accordion-dropdown-content");
      if (parentDropdown) {
        parentDropdown.querySelectorAll(".accordion-nested-dropdown.active").forEach((activeNested) => {
          if (activeNested !== nestedDropdown) {
            activeNested.classList.remove("active");
          }
        });
      }
      
      // Toggle current nested dropdown
      nestedDropdown.classList.toggle("active", !isActive);
    });
  });

  // Regular accordion links (close menu when clicked)
  const accordionLinks = document.querySelectorAll(
    ".accordion-link, .accordion-sublink"
  );
  accordionLinks.forEach((link) => {
    link.addEventListener("click", function () {
      closeAccordionMenu();
      const menuToggle = document.getElementById("menuToggle");
      if (menuToggle) {
        menuToggle.classList.remove("active");
      }
    });
  });

  // Click outside to close
  document.addEventListener("click", function (e) {
    const menu = document.getElementById("accordionMenu");
    const menuToggle = document.getElementById("menuToggle");

    if (
      menu &&
      menuToggle &&
      !menu.contains(e.target) &&
      !menuToggle.contains(e.target) &&
      menu.classList.contains("active")
    ) {
      closeAccordionMenu();
      menuToggle.classList.remove("active");
    }
  });

  // Escape key to close
  document.addEventListener("keydown", function (e) {
    if (e.key === "Escape") {
      closeAccordionMenu();
      const menuToggle = document.getElementById("menuToggle");
      if (menuToggle) {
        menuToggle.classList.remove("active");
      }
    }
  });

  // Language toggle functionality with Arabic translations
  const languageToggle = document.getElementById("languageToggle");
  if (languageToggle) {
    // Get current language from localStorage or default to English
    let currentLang = localStorage.getItem('language') || 'en';
    
    // Arabic translations for homepage content
    const translations = {
      en: {
        // Hero Section
        heroTitle: "Adam International Hospital",
        heroSubtitle: "Compassionate Care, Advanced Fertility Solutions",
        
        // Glass Cards
        ivfTitle: "IVF & ICSI",
        ivfDescription: "Advanced fertility treatments guided by expert doctors, helping you achieve the dream of parenthood.",
        ivfButton: "Start Now",
        
        personalizedTitle: "Personalized Support",
        personalizedDescription: "Dedicated, one-on-one care throughout your journey, ensuring comfort, trust, and confidence at every step.",
        personalizedButton: "Learn More",
        
        geneticTitle: "Genetic Testing & Freezing",
        geneticDescription: "Cutting-edge lab services, from genetic screening to embryo freezing, protecting your family's future health.",
        geneticButton: "Explore Now",
        
        // Fertility Cards
        femaleFertility: "Female fertility",
        maleFertility: "Male fertility",
        ivfIcsi: "IVF & ICSI",
        geneticTesting: "Genetic Testing",
        diagnostics: "Diagnostics",
        treatments: "Treatments",
        ivfProcess: "IVF Process",
        icsiTreatment: "ICSI Treatment",
        pgtTesting: "PGT Testing",
        screening: "Screening",
        
        // Statistics Section
        statsTitle: "Our journey in numbers",
        patientNationalities: "Patient nationalities",
        ivfBabiesBorn: "Adam's Fertility IVF babies born",
        yearsOpen: "open since 1994 - 30 years",
        patientRatings: "94.3% gave us at least 4* ratings"
      },
      ar: {
        // Hero Section
        heroTitle: "Ù…Ø³ØªØ´ÙÙ‰ Ø¢Ø¯Ù… Ø§Ù„Ø¯ÙˆÙ„ÙŠ",
        heroSubtitle: "Ø±Ø¹Ø§ÙŠØ© Ø±Ø­ÙŠÙ…Ø©ØŒ Ø­Ù„ÙˆÙ„ Ø®ØµÙˆØ¨Ø© Ù…ØªÙ‚Ø¯Ù…Ø©",
        
        // Glass Cards
        ivfTitle: "Ø£Ø·ÙØ§Ù„ Ø§Ù„Ø£Ù†Ø§Ø¨ÙŠØ¨ ÙˆØ§Ù„Ø­Ù‚Ù† Ø§Ù„Ù…Ø¬Ù‡Ø±ÙŠ",
        ivfDescription: "Ø¹Ù„Ø§Ø¬Ø§Øª Ø®ØµÙˆØ¨Ø© Ù…ØªÙ‚Ø¯Ù…Ø© Ø¨Ø¥Ø´Ø±Ø§Ù Ø£Ø·Ø¨Ø§Ø¡ Ø®Ø¨Ø±Ø§Ø¡ØŒ Ù„Ù…Ø³Ø§Ø¹Ø¯ØªÙƒ ÙÙŠ ØªØ­Ù‚ÙŠÙ‚ Ø­Ù„Ù… Ø§Ù„Ø£Ø¨ÙˆØ© ÙˆØ§Ù„Ø£Ù…ÙˆÙ…Ø©.",
        ivfButton: "Ø§Ø¨Ø¯Ø£ Ø§Ù„Ø¢Ù†",
        
        personalizedTitle: "Ø¯Ø¹Ù… Ø´Ø®ØµÙŠ",
        personalizedDescription: "Ø±Ø¹Ø§ÙŠØ© Ù…Ø®ØµØµØ© ÙˆÙØ±Ø¯ÙŠØ© Ø·ÙˆØ§Ù„ Ø±Ø­Ù„ØªÙƒØŒ Ù…Ù…Ø§ ÙŠØ¶Ù…Ù† Ø§Ù„Ø±Ø§Ø­Ø© ÙˆØ§Ù„Ø«Ù‚Ø© ÙˆØ§Ù„Ø·Ù…Ø£Ù†ÙŠÙ†Ø© ÙÙŠ ÙƒÙ„ Ø®Ø·ÙˆØ©.",
        personalizedButton: "Ø§Ø¹Ø±Ù Ø§Ù„Ù…Ø²ÙŠØ¯",
        
        geneticTitle: "Ø§Ù„ÙØ­Øµ Ø§Ù„Ø¬ÙŠÙ†ÙŠ ÙˆØªØ¬Ù…ÙŠØ¯ Ø§Ù„Ø£Ø¬Ù†Ø©",
        geneticDescription: "Ø®Ø¯Ù…Ø§Øª Ù…Ø®ØªØ¨Ø±ÙŠØ© Ù…ØªØ·ÙˆØ±Ø©ØŒ Ù…Ù† Ø§Ù„ÙØ­Øµ Ø§Ù„Ø¬ÙŠÙ†ÙŠ Ø¥Ù„Ù‰ ØªØ¬Ù…ÙŠØ¯ Ø§Ù„Ø£Ø¬Ù†Ø©ØŒ Ù„Ø­Ù…Ø§ÙŠØ© ØµØ­Ø© Ø¹Ø§Ø¦Ù„ØªÙƒ Ø§Ù„Ù…Ø³ØªÙ‚Ø¨Ù„ÙŠØ©.",
        geneticButton: "Ø§Ø³ØªÙƒØ´Ù Ø§Ù„Ø¢Ù†",
        
        // Fertility Cards
        femaleFertility: "Ø®ØµÙˆØ¨Ø© Ø§Ù„Ù…Ø±Ø£Ø©",
        maleFertility: "Ø®ØµÙˆØ¨Ø© Ø§Ù„Ø±Ø¬Ù„",
        ivfIcsi: "Ø£Ø·ÙØ§Ù„ Ø§Ù„Ø£Ù†Ø§Ø¨ÙŠØ¨ ÙˆØ§Ù„Ø­Ù‚Ù† Ø§Ù„Ù…Ø¬Ù‡Ø±ÙŠ",
        geneticTesting: "Ø§Ù„ÙØ­Øµ Ø§Ù„Ø¬ÙŠÙ†ÙŠ",
        diagnostics: "Ø§Ù„ØªØ´Ø®ÙŠØµ",
        treatments: "Ø§Ù„Ø¹Ù„Ø§Ø¬Ø§Øª",
        ivfProcess: "Ø¹Ù…Ù„ÙŠØ© Ø£Ø·ÙØ§Ù„ Ø§Ù„Ø£Ù†Ø§Ø¨ÙŠØ¨",
        icsiTreatment: "Ø¹Ù„Ø§Ø¬ Ø§Ù„Ø­Ù‚Ù† Ø§Ù„Ù…Ø¬Ù‡Ø±ÙŠ",
        pgtTesting: "ÙØ­Øµ PGT",
        screening: "Ø§Ù„ÙØ­Øµ",
        
        // Statistics Section
        statsTitle: "Ø±Ø­Ù„ØªÙ†Ø§ Ø¨Ø§Ù„Ø£Ø±Ù‚Ø§Ù…",
        patientNationalities: "Ø¬Ù†Ø³ÙŠØ§Øª Ø§Ù„Ù…Ø±Ø¶Ù‰",
        ivfBabiesBorn: "Ø£Ø·ÙØ§Ù„ Ø£Ù†Ø§Ø¨ÙŠØ¨ Ø¢Ø¯Ù… Ù„Ù„Ø®ØµÙˆØ¨Ø© Ø§Ù„Ù…ÙˆÙ„ÙˆØ¯ÙŠÙ†",
        yearsOpen: "Ù…ÙØªÙˆØ­ Ù…Ù†Ø° 1994 - 30 Ø¹Ø§Ù…Ø§Ù‹",
        patientRatings: "94.3% Ø£Ø¹Ø·ÙˆÙ†Ø§ ØªÙ‚ÙŠÙŠÙ… 4 Ù†Ø¬ÙˆÙ… Ø¹Ù„Ù‰ Ø§Ù„Ø£Ù‚Ù„"
      }
    };
    
    // Function to translate homepage content
    function translateHomepage() {
      const t = translations[currentLang];
      
      // Only translate if we're on the homepage (index.html or root)
      const isHomepage = window.location.pathname === '/' || 
                        window.location.pathname === '/index.html' || 
                        window.location.pathname.endsWith('index.html') ||
                        window.location.pathname === '';
      
      if (!isHomepage) {
        return;
      }
      
      // Hero Section
      const heroTitle = document.querySelector('.hero-main-title');
      if (heroTitle) {
        if (currentLang === 'ar') {
          heroTitle.innerHTML = `<span style="color: #86171d; font-weight: 700; font-family: 'Roboto', sans-serif;">${t.heroTitle}</span>`;
        } else {
          heroTitle.innerHTML = `<span style="color: #86171d; font-weight: 700; font-family: 'Roboto', sans-serif;">Adam</span> <span style="color: black; font-family: 'Roboto', sans-serif;">International Hospital</span>`;
        }
      }
      
      const heroSubtitle = document.querySelector('.hero-subtitle');
      if (heroSubtitle) {
        heroSubtitle.textContent = t.heroSubtitle;
      }
      
      // Glass Cards
      const glassCardTitles = document.querySelectorAll('.glass-card-title');
      const glassCardDescriptions = document.querySelectorAll('.glass-card-description');
      const glassCardButtons = document.querySelectorAll('.glass-card-btn');
      
      if (glassCardTitles[0]) {
        glassCardTitles[0].textContent = t.ivfTitle;
      }
      if (glassCardTitles[1]) {
        glassCardTitles[1].textContent = t.personalizedTitle;
      }
      if (glassCardTitles[2]) {
        glassCardTitles[2].textContent = t.geneticTitle;
      }
      
      if (glassCardDescriptions[0]) {
        glassCardDescriptions[0].textContent = t.ivfDescription;
      }
      if (glassCardDescriptions[1]) {
        glassCardDescriptions[1].textContent = t.personalizedDescription;
      }
      if (glassCardDescriptions[2]) {
        glassCardDescriptions[2].textContent = t.geneticDescription;
      }
      
      if (glassCardButtons[0]) {
        glassCardButtons[0].textContent = t.ivfButton;
      }
      if (glassCardButtons[1]) {
        glassCardButtons[1].textContent = t.personalizedButton;
      }
      if (glassCardButtons[2]) {
        glassCardButtons[2].textContent = t.geneticButton;
      }
      
      // Fertility Cards
      const cardTitles = document.querySelectorAll('.card-title');
      if (cardTitles[0]) {
        cardTitles[0].textContent = t.femaleFertility;
      }
      if (cardTitles[1]) {
        cardTitles[1].textContent = t.maleFertility;
      }
      if (cardTitles[2]) {
        cardTitles[2].textContent = t.ivfIcsi;
      }
      if (cardTitles[3]) {
        cardTitles[3].textContent = t.geneticTesting;
      }
      
      // Card Buttons
      const diagnosticsButtons = document.querySelectorAll('.diagnostics-btn');
      const treatmentsButtons = document.querySelectorAll('.treatments-btn');
      
      diagnosticsButtons.forEach(btn => {
        if (btn.textContent.includes('Diagnostics')) {
          btn.textContent = t.diagnostics;
        }
        if (btn.textContent.includes('IVF Process')) {
          btn.textContent = t.ivfProcess;
        }
        if (btn.textContent.includes('PGT Testing')) {
          btn.textContent = t.pgtTesting;
        }
      });
      
      treatmentsButtons.forEach(btn => {
        if (btn.textContent.includes('Treatments')) {
          btn.textContent = t.treatments;
        }
        if (btn.textContent.includes('ICSI Treatment')) {
          btn.textContent = t.icsiTreatment;
        }
        if (btn.textContent.includes('Screening')) {
          btn.textContent = t.screening;
        }
      });
      
      // Statistics Section
      const statsTitle = document.querySelector('.stats-title');
      if (statsTitle) {
        statsTitle.textContent = t.statsTitle;
      }
      
      const statLabels = document.querySelectorAll('.stat-label');
      if (statLabels[0]) {
        statLabels[0].textContent = t.patientNationalities;
      }
      if (statLabels[1]) {
        statLabels[1].textContent = t.ivfBabiesBorn;
      }
      if (statLabels[2]) {
        statLabels[2].textContent = t.yearsOpen;
      }
      if (statLabels[3]) {
        statLabels[3].textContent = t.patientRatings;
      }
    }
    
    // Update button text based on current language
    function updateLanguageButton() {
      const langText = languageToggle.querySelector('.lang-text');
      if (langText) {
        langText.textContent = currentLang === 'en' ? 'العربية' : 'English';
      }
      // Update HTML lang attribute
      document.documentElement.setAttribute('lang', currentLang);
    }
    
    // Initialize language on page load
    function initializeLanguage() {
      updateLanguageButton();
      translateHomepage();
      
      // Set text direction
      if (currentLang === 'ar') {
        document.body.setAttribute('dir', 'rtl');
        document.documentElement.setAttribute('dir', 'rtl');
      } else {
        document.body.setAttribute('dir', 'ltr');
        document.documentElement.setAttribute('dir', 'ltr');
      }
    }
    
    // Initialize on page load
    initializeLanguage();
    
    languageToggle.addEventListener("click", function() {
      // Toggle language
      currentLang = currentLang === 'en' ? 'ar' : 'en';
      
      // Save to localStorage
      localStorage.setItem('language', currentLang);
      
      // Update everything
      updateLanguageButton();
      translateHomepage();
      
      // Set text direction
      if (currentLang === 'ar') {
        document.body.setAttribute('dir', 'rtl');
        document.documentElement.setAttribute('dir', 'rtl');
      } else {
        document.body.setAttribute('dir', 'ltr');
        document.documentElement.setAttribute('dir', 'ltr');
      }
      
      // Add visual feedback
      this.style.transform = 'scale(0.95)';
      setTimeout(() => {
        this.style.transform = 'scale(1)';
      }, 150);
    });
  }
});

// Window load event for component initialization
window.addEventListener('load', function() {
  try {
    // Fallback: Check if header and footer are loaded, if not, load them
    const headerPlaceholder = document.getElementById('header-placeholder');
    const footerPlaceholder = document.getElementById('footer-placeholder');
    
    if (headerPlaceholder && !headerPlaceholder.innerHTML.trim()) {
      loadHeader();
    }
    
    if (footerPlaceholder && !footerPlaceholder.innerHTML.trim()) {
      loadFooter();
    }
    
    // Initialize other components
    initCounters();
    initializeChatbot();
    
    // Initialize AOS (Animate On Scroll) after page load
    if (typeof AOS !== 'undefined') {
      AOS.init({
        duration: 800,
        easing: 'ease-in-out',
        once: true,
        offset: 100
      });
    }
  } catch (error) {
    // Error in window load event
  }
});

// Modern Chatbot Functionality
function initializeChatbot() {
  // Prevent multiple initializations
  if (window.chatbotInitialized) {
    return;
  }
  
  // Add a small delay to ensure DOM is fully ready
  setTimeout(() => {
    const chatbotToggle = document.getElementById("chatbotToggle");
    const chatbotWindow = document.getElementById("chatbotWindow");
    const chatbotClose = document.getElementById("chatbotClose");
    const chatbotInput = document.getElementById("chatbotInput");
    const sendButton = document.getElementById("chatbotSend");
    const chatbotMessages = document.getElementById("chatbotMessages");
    const quickActions = document.querySelectorAll(".quick-action");

    if (!chatbotToggle || !chatbotWindow) {
      return;
    }
  
  // Mark as initialized
  window.chatbotInitialized = true;

  let isOpen = false;

  // Toggle chatbot window
  function toggleChatbot() {
    isOpen = !isOpen;
    chatbotWindow.classList.toggle("open", isOpen);

    if (isOpen) {
      chatbotInput.focus();
    }
  }

  // Add message to chat
  function addMessage(content, isUser = false) {
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${isUser ? "user-message" : "bot-message"}`;

    messageDiv.innerHTML = `
            <div class="message-avatar">
                ${isUser ? "👤" : "🏥"}
            </div>
            <div class="message-content">
                <p>${content}</p>
            </div>
        `;

    chatbotMessages.appendChild(messageDiv);
    chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
  }

  // Send message
  function sendMessage() {
    const message = chatbotInput.value.trim();
    if (!message) {
      return;
    }

    // Add user message
    addMessage(message, true);
    chatbotInput.value = "";

    // Simulate bot response with intelligent keyword detection
    setTimeout(() => {
      const lowerMessage = message.toLowerCase();
      let response = "";

      // Keyword-based responses for fertility hospital
      if (lowerMessage.includes("ivf") || lowerMessage.includes("in vitro")) {
        response = "IVF (In Vitro Fertilization) is one of our specialized treatments. We offer comprehensive IVF services with high success rates. Would you like to know more about the process or schedule a consultation?";
      } else if (lowerMessage.includes("icsi")) {
        response = "ICSI (Intracytoplasmic Sperm Injection) is an advanced fertility treatment we provide. It's often recommended for male factor infertility. Our specialists can evaluate if ICSI is right for you.";
      } else if (lowerMessage.includes("appointment") || lowerMessage.includes("book") || lowerMessage.includes("schedule")) {
        response = "I'd be happy to help you schedule an appointment! Please call us at 16992 or you can book online. Our fertility specialists are available for consultations Monday through Saturday.";
      } else if (lowerMessage.includes("cost") || lowerMessage.includes("price") || lowerMessage.includes("fee")) {
        response = "Treatment costs vary depending on your specific needs. We offer transparent pricing and payment plans. Please contact us at 16992 for detailed cost information and insurance coverage options.";
      } else if (lowerMessage.includes("success") || lowerMessage.includes("rate")) {
        response = "Our fertility treatments have excellent success rates. Success depends on various factors including age, diagnosis, and treatment type. Our specialists will discuss your individual chances during consultation.";
      } else if (lowerMessage.includes("pcos") || lowerMessage.includes("endometriosis")) {
        response = "We specialize in treating PCOS and endometriosis-related fertility issues. Our comprehensive approach includes medical management and advanced reproductive techniques. Would you like to learn more about treatment options?";
      } else if (lowerMessage.includes("male") || lowerMessage.includes("sperm")) {
        response = "We offer comprehensive male fertility evaluation and treatments including sperm analysis, TESE procedures, and male factor infertility management. Our andrologists provide specialized care for male reproductive health.";
      } else if (lowerMessage.includes("genetic") || lowerMessage.includes("testing")) {
        response = "We provide advanced genetic testing including PGT (Preimplantation Genetic Testing) to help ensure healthy pregnancies. Our genetic counselors can explain the benefits and process in detail.";
      } else if (lowerMessage.includes("location") || lowerMessage.includes("address") || lowerMessage.includes("where")) {
        response = "<span style='color: #86171d; font-weight: 700;'>Adam International Hospital</span> is conveniently located in Egypt. You can find our exact address and directions on our contact page. We're easily accessible with parking available.";
      } else if (lowerMessage.includes("hours") || lowerMessage.includes("time") || lowerMessage.includes("open")) {
        response = "Our fertility clinic is open Monday through Saturday. Consultation hours vary by specialist. Please call 16992 to check availability and schedule your appointment at a convenient time.";
      } else {
        const generalResponses = [
          "Thank you for contacting <span style='color: #86171d; font-weight: 700;'>Adam International Hospital</span>! How can I help you with your fertility journey today?",
          "I'm here to assist you with information about our fertility treatments. What would you like to know?",
          "Our fertility specialists are here to help. Could you tell me more about what you're looking for?",
          "Welcome to <span style='color: #86171d; font-weight: 700;'>Adam International Hospital</span>! I'd be happy to help you learn about our fertility services."
        ];
        response = generalResponses[Math.floor(Math.random() * generalResponses.length)];
      }
      
      addMessage(response);
    }, 1000);
  }

  // Handle quick actions
  function handleQuickAction(action) {
    const responses = {
      "Book Appointment":
        "To schedule your fertility consultation, please call us at 19662 or use our online booking system. We offer flexible appointment times Monday through Saturday. Initial consultations typically take 45-60 minutes.",
      "Our Services":
        "We offer comprehensive fertility services including IVF, ICSI, genetic testing, male fertility treatments, and reproductive surgery. Our success rates are among the highest in the region. Which treatment would you like to learn more about?",
      "Fertility Treatments":
        "Our fertility treatments include IVF, ICSI, IUI, genetic testing (PGT), egg freezing, sperm banking, and surgical procedures. Each treatment is personalized to your specific needs and medical history.",
      "Contact Info":
        "📞 Phone: 19662<br>📧 Email: Available on our contact page<br>📍 Location: <span style='color: #86171d; font-weight: 700;'>Adam International Hospital</span>, Egypt<br>🕐 Hours: Monday-Saturday<br><br>How would you prefer to be contacted?",
      FAQ: "Common questions include success rates, treatment costs, insurance coverage, and appointment scheduling. What specific information would you like to know about our fertility services?",
      Location:
        "<span style='color: #86171d; font-weight: 700;'>Adam International Hospital</span> is conveniently located in Egypt with easy access and parking available. You can find detailed directions and our exact address on our contact page.",
    };

    addMessage(action, true);
    setTimeout(() => {
      addMessage(
        responses[action] ||
          "Thank you for your inquiry about our fertility services. How can I assist you further with your fertility journey?"
      );
    }, 800);
  }

  // Event listeners
  if (chatbotToggle) {
    chatbotToggle.addEventListener("click", toggleChatbot);
  }
  if (chatbotClose) {
    chatbotClose.addEventListener("click", toggleChatbot);
  }

  if (sendButton) {
    sendButton.addEventListener("click", sendMessage);
  }

  if (chatbotInput) {
    chatbotInput.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        sendMessage();
      }
    });
  }

  if (quickActions && quickActions.length > 0) {
    quickActions.forEach((button) => {
      button.addEventListener("click", function () {
        handleQuickAction(this.textContent.trim());
      });
    });
  }

  // Close chatbot when clicking outside
  document.addEventListener("click", function (e) {
    if (
      isOpen &&
      chatbotToggle &&
      chatbotWindow &&
      !chatbotToggle.contains(e.target) &&
      !chatbotWindow.contains(e.target)
    ) {
      toggleChatbot();
    }
  });
  }, 100); // 100ms delay to ensure DOM is ready
}


// High Contrast Mode Functionality
function initializeHighContrastToggle() {
  const toggleButton = document.getElementById('high-contrast-toggle');
  
  if (!toggleButton) {
    // High contrast toggle button not found
    return;
  }

  // Check for saved preference
  const isHighContrast = localStorage.getItem('high-contrast-mode') === 'true';
  
  // Apply saved preference
  if (isHighContrast) {
    document.body.classList.add('high-contrast-mode');
    updateToggleButton(toggleButton, true);
  }

  // Add click event listener
  toggleButton.addEventListener('click', () => {
    const isCurrentlyHighContrast = document.body.classList.contains('high-contrast-mode');
    
    if (isCurrentlyHighContrast) {
      // Disable high contrast
      document.body.classList.remove('high-contrast-mode');
      localStorage.setItem('high-contrast-mode', 'false');
      updateToggleButton(toggleButton, false);

    } else {
      // Enable high contrast
      document.body.classList.add('high-contrast-mode');
      localStorage.setItem('high-contrast-mode', 'true');
      updateToggleButton(toggleButton, true);
      
    }
  });

  // Add keyboard support
  toggleButton.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      toggleButton.click();
    }
  });
}

function updateToggleButton(button, isHighContrast) {
  const icon = button.querySelector('i');
  const text = button.querySelector('span');
  
  if (isHighContrast) {
    button.setAttribute('aria-pressed', 'true');
    button.title = 'Disable high contrast mode';
    if (icon) {
      icon.className = 'fas fa-eye';
    }
    if (text) {
      text.textContent = 'Normal View';
    }
  } else {
    button.setAttribute('aria-pressed', 'false');
    button.title = 'Enable high contrast mode for better visibility';
    if (icon) {
      icon.className = 'fas fa-adjust';
    }
    if (text) {
      text.textContent = 'High Contrast';
    }
  }
}

// Initialize components when page loads
window.addEventListener('load', () => {
  // Initialize high contrast toggle after a short delay to ensure DOM is ready
  setTimeout(() => {
    initializeHighContrastToggle();
  }, 100);
});

